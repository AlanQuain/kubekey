---
- name: Stop if etcd deployment type is not internal or external
  assert:
    that: kubernetes.etcd.deployment_type in cluster_require.require_etcd_deployment_type
    fail_msg: "The etcd deployment type, 'kubernetes.etcd.deployment_type', must be internal or external"
  run_once: true
  when: kubernetes.etcd.deployment_type | defined

- name: Stop if etcd group is empty in internal etcd mode
  assert:
    that: "'etcd' in groups"
    fail_msg: "Group 'etcd' cannot be empty in external etcd mode"
  run_once: true
  when:
    - kubernetes.etcd.deployment_type  == "external"

- name: Stop if the os does not support
  assert:
    that: (cluster_require.allow_unsupported_distribution_setup) or (os.release.ID in cluster_require.supported_os_distributions)
    fail_msg: "{{ os.release.ID }} is not a known OS"

- name: Stop if unknown network plugin
  assert:
    that: kubernetes.kube_network_plugin in cluster_require.require_network_plugin
    fail_msg: "{{ kubernetes.kube_network_plugin }} is not supported"
  when:
    - kubernetes.kube_network_plugin | defined

- name: Stop if unsupported version of Kubernetes
  assert:
    that: kube_version | version:'>={{ cluster_require.kube_version_min_required }}'
    fail_msg: "The current release of Kubespray only support newer version of Kubernetes than {{ kube_version_min_required }} - You are trying to apply {{ kube_version }}"
  when:
    - kube_version | defined

- name: Stop if even number of etcd hosts
  assert:
    that: not groups.etcd | length | divisibleby:2
  when:
    - inventory_name in groups['etcd']

- name: Stop if memory is too small for masters
  assert:
    that: process.memInfo.MemTotal | cut:' kB' >= cluster_require.minimal_master_memory_mb
  when:
    - inventory_name in groups['kube_control_plane']

- name: Stop if memory is too small for nodes
  assert:
    that: process.memInfo.MemTotal | cut:' kB' >= cluster_require.minimal_node_memory_mb
  when:
    - inventory_name in groups['kube_worker']

# This assertion will fail on the safe side: One can indeed schedule more pods
# on a node than the CIDR-range has space for when additional pods use the host
# network namespace. It is impossible to ascertain the number of such pods at
# provisioning time, so to establish a guarantee, we factor these out.
# NOTICE: the check blatantly ignores the inet6-case
- name: Guarantee that enough network address space is available for all pods
  assert:
    that: "(kubernetes.kubelet.max_pods | integer)  <= (2 | pow: {{ 32 - kubernetes.controller_manager.kube_network_node_prefix | integer }} - 2)"
    fail_msg: "Do not schedule more pods on a node than inet addresses are available."
  when:
    - inventory_name in groups['k8s_cluster']
    - kubernetes.controller_manager.kube_network_node_prefix | defined
    - kubernetes.kube_network_plugin != 'calico'

#- name: Stop if access_ip is not pingable
#  command: ping -c1 {{ access_ip }}
#  when:
#    - access_ip | defined
#    - ping_access_ip
#  changed_when: false

- name: Stop if kernel version is too low
  assert:
    that: os.kernel_version | split:'-' | first | version:'>=4.9.17'
  when:
    - kubernetes.kube_network_plugin == 'cilium'
#    - kubernetes.kube_network_plugin == 'cilium' or (cilium_deploy_additionally | default:false)

- name: Stop if bad hostname
  vars:
    regex: '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
  assert:
    that: inventory_name | match:regex
    fail_msg: "Hostname must consist of lower case alphanumeric characters, '.' or '-', and must start and end with an alphanumeric character"

- name: Stop if container manager is not docker or containerd
  assert:
    that: cri.container_manager in cluster_require.require_container_manager
    fail_msg: "The container manager:{{ cri.container_manager }}, must be docker or containerd"
  run_once: true
  when: cri.container_manager | defined

- name: Ensure minimum containerd version
  assert:
    that: containerd_version | version:'>={{cluster_require.containerd_min_version_required}}'
    fail_msg: "containerd_version is too low. Minimum version {{ cluster_require.containerd_min_version_required }}"
  run_once: true
  when:
    - not containerd_version in cluster_require.require_containerd_version
    - cri.container_manager == 'containerd'

- name: Check os if supported
  assert:
    that: os.architecture in cluster_require.supported_architectures.amd64 or os.architecture in cluster_require.supported_architectures.arm64
    success_msg: "{% if (os.architecture in cluster_require.supported_architectures.amd64) %}amd64{% else %}arm64{% endif %}"
  register: binary_type

- name: Stop if nfs server is not be one
  assert:
    that: groups['nfs'] | length == 1
  fail_msg: "Only one nfs server is supported"
  when: groups['nfs'] | length > 0
