---
- name: Check if image to load
  ignore_errors: true
  command: |
    ls {{ work_dir }}/kubekey/images/
  register: local_images_dir

- name: Sync oras to remote
  copy:
    src: "{{ work_dir }}/kubekey/oras/{{ oras_version }}/{{ binary_type.stdout }}/oras_{{ oras_version|slice:'1:' }}_linux_{{ binary_type.stdout }}.tar.gz"
    dest: "/tmp/kubekey/oras_{{ oras_version|slice:'1:' }}_linux_{{ binary_type.stdout }}.tar.gz"
  when: local_images_dir.stderr == ""

- name: Unpackage oras binary
  command: tar -zxvf /tmp/kubekey/oras_{{ oras_version|slice:'1:' }}_linux_{{ binary_type.stdout }}.tar.gz -C /usr/local/bin oras
  when: local_images_dir.stderr == ""

- name: Sync images package to remote
  copy:
    src: "{{ work_dir }}/kubekey/images/"
    dest: "/tmp/kubekey/images/"
  when: local_images_dir.stderr == ""

- name: Sync images to registry
  command: |
    for dir in /tmp/kubekey/images/*; do
      if [ ! -d "$dir" ]; then
        # only deal directory
        continue
      fi
    
      IFS='=' read -ra array <<< "${dir##*/}"
      if [ $(echo ${my_array[@]} | wc -w) > 3 ]; then
        project=${array[1]}
        dest_image=$(echo "${array[@]:2:-1}" | tr ' ' '/')
        tag=${array[-1]}
      else
        echo "unsupported image"
        exit 1
      fi
    
      # if project is not exist, create if
      http_code=$(curl -Iks -u "admin:{{ image_registry.harbor.admin_password }}"  'https://localhost/api/v2.0/projects?project_name=${project}' | grep HTTP | awk '{print $2}')
      if [ $http_code == 404 ]; then
          # create project
          curl -u "admin:{{ image_registry.harbor.admin_password }}" -k -X POST -H "Content-Type: application/json" "https://localhost/api/v2.0/projects" -d "{ \"project_name\": \"${project}\", \"public\": true}"
      fi
    
      oras cp --to-username admin --to-password {{ image_registry.harbor.admin_password }} ${dir##*/} localhost/${project}/${dest_image}:${tag}
    done
  when: local_images_dir.stderr == ""
